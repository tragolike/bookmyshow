
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://gfmxvjxgjswbxbtkseap.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdmbXh2anhnanN3YnhidGtzZWFwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1OTg2OTEsImV4cCI6MjA1OTE3NDY5MX0.ajBWfE7Ici2KiCBL3Hnl24ocJS4-1MZLX8ehvHX9b6c";

// Define our custom Database interface that matches our actual Supabase schema
export type Tables = Database['public']['Tables']

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Add a typed helper function to make working with the database easier
export const db = {
  profiles: () => supabase.from('profiles'),
  events: () => supabase.from('events'),
  movies: () => supabase.from('movies'),
  bookings: () => supabase.from('bookings'),
  // For cities and countries, we need proper type definitions
  cities: () => supabase.from('cities') as any,
  countries: () => supabase.from('countries') as any
};

// Type definitions for common data types
export type BookingStatus = 'confirmed' | 'pending' | 'cancelled';
export type PaymentStatus = 'completed' | 'pending' | 'failed';
export type EventStatus = 'fast-filling' | 'sold-out' | 'available';

// Helper function to get event by ID - centralized logic to prevent 404 errors
export const getEventById = async (id: string) => {
  try {
    const { data, error } = await db.events()
      .select('*')
      .eq('id', id)
      .single();
      
    if (error) throw error;
    return { data, error: null };
  } catch (error) {
    console.error('Error fetching event by ID:', error);
    return { data: null, error };
  }
};

// Helper function to get events by city - to fix city-based filtering
export const getEventsByCity = async (city: string) => {
  try {
    const { data, error } = await db.events()
      .select('*')
      .eq('city', city);
      
    if (error) throw error;
    return { data, error: null };
  } catch (error) {
    console.error('Error fetching events by city:', error);
    return { data: null, error };
  }
};

// Helper function to get latest events - for homepage
export const getLatestEvents = async (limit = 6) => {
  try {
    const { data, error } = await db.events()
      .select('*')
      .order('created_at', { ascending: false })
      .limit(limit);
      
    if (error) throw error;
    return { data, error: null };
  } catch (error) {
    console.error('Error fetching latest events:', error);
    return { data: null, error };
  }
};
